#共有8个级别，按照从低到高为：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
#status：用于设置#log4j2自身内部的信息输出，可以不设置
#monitorInterval：log4j2监测配置文件的时间间隔，如果文件被修改，则重新加载

Configuration:
  status: info #trace”, “debug”, “info”, “warn”, “error” and “fatal”，用于控制log4j2日志框架本身的日志级别，如果将stratus设置为较低的级别就会看到很多关于log4j2本身的日志
  monitorInterval: 30 #monitorInterval，含义是每隔多少秒重新读取配置文件，可以不重启应用的情况下修改配置

  Properties: # 定义全局变量
    Property:
      - name: log.level.console
        value: info
      - name: log.path
        # “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值
        # ${sys:catalina.home} 指向tomcat安装目录
        value: /logs
      - name: project.name
        value: CloudEmploy
      - name: log.pattern
        value: "%d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%15.15t] %-30.30C{1.} : %m%n"

  Appenders:
    Console:  # 输出到控制台
      name: CONSOLE
      target: SYSTEM_OUT
      PatternLayout:
        pattern: ${log.pattern}
    NoSql:   #输出到mongoDB
      name: infoMongo
      bufferSize: 16
      MongoDb:
        databaseName: admin
        collectionName: infoLog
        server: 192.168.85.23
        port: 27017
        username: root
        password: root
    RollingFile: # 打印到文件
      - name: ROLLING_FILE
        # fileName  指定当前日志文件的位置和文件名称
        fileName: ${log.path}/${project.name}.log
        # filePattern  指定当发生Rolling时，文件的转移和重命名规则
        filePattern: "${log.path}/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Filters:
          ThresholdFilter:
            - level: ${sys:log.level.console}
              onMatch: ACCEPT
              onMismatch: DENY
        Policies:
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:     # 文件最多100个
          max: 100

  #只有定义了 Loggers，并引入 Appenders，Appenders才会生效
  Loggers:
    Root: #日志器分根日志器Root和自定义日志器，当根据日志名字获取不到指定的日志器时就使用Root作为默认的日志器
      level: info
      AppenderRef:
        - ref: CONSOLE
        - ref: infoMongo

  Logger: # 为com.***包配置特殊的Log级别，方便调试，trace会打印SQL具体结果，debug只打印SQL语句,日志级别level，相加性additivity（是否继承下面配置的日志器）
    - name: mongologger
      additivity: true #additivity指定是否同时输出log到父类的appender，缺省为true
      level: info #不指定时level默认为ERROR
      AppenderRef: #一般需要配置一个或多个输出源AppenderRef
        - ref: CONSOLE
        - ref: infoMongo